//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-11-29 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "C:\\Users\\Ana Gomes\\Desktop\\ficheiros em rtf\\Board.rtf".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.Set;
import java.util.List;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Board implements EvaluatePP {

// ***** VDMTOOLS START Name=positions KEEP=NO
  private volatile Map positions = new HashMap();
// ***** VDMTOOLS END Name=positions

// ***** VDMTOOLS START Name=arrows KEEP=NO
  private volatile List arrows = null;
// ***** VDMTOOLS END Name=arrows

// ***** VDMTOOLS START Name=turn KEEP=NO
  private volatile Object turn = null;
// ***** VDMTOOLS END Name=turn

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardSentinel KEEP=NO
  class BoardSentinel extends Sentinel {

    public final int move = 0;

    public final int Board = 1;

    public final int canMove = 2;

    public final int gameOver = 3;

    public final int setArrow = 4;

    public final int pathIsFree = 5;

    public final int switchTurn = 6;

    public final int getPositions = 7;

    public final int setPositions = 8;

    public final int nr_functions = 9;


    public BoardSentinel () throws CGException {}


    public BoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_Board KEEP=NO
  private void vdm_init_Board () {
    try {
      setSentinel();
      arrows = new ArrayList();
      turn = new quotes.White();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Board


// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board () throws CGException {
    try {
      vdm_init_Board();
      {
        Amazon w1 = new Amazon(new Integer(0), new Integer(3), new quotes.White());
        Amazon w2 = new Amazon(new Integer(3), new Integer(0), new quotes.White());
        Amazon w3 = new Amazon(new Integer(9), new Integer(3), new quotes.White());
        Amazon w4 = new Amazon(new Integer(6), new Integer(0), new quotes.White());
        Amazon b1 = new Amazon(new Integer(0), new Integer(6), new quotes.Black());
        Amazon b2 = new Amazon(new Integer(3), new Integer(9), new quotes.Black());
        Amazon b3 = new Amazon(new Integer(6), new Integer(9), new quotes.Black());
        Amazon b4 = new Amazon(new Integer(9), new Integer(6), new quotes.Black());
        Map rhs_25 = new HashMap();
        rhs_25.put(new Piece.Position(new Integer(0), new Integer(3)), w1);
        rhs_25.put(new Piece.Position(new Integer(0), new Integer(3)), w1);
        rhs_25.put(new Piece.Position(new Integer(3), new Integer(0)), w2);
        rhs_25.put(new Piece.Position(new Integer(9), new Integer(3)), w3);
        rhs_25.put(new Piece.Position(new Integer(6), new Integer(0)), w4);
        rhs_25.put(new Piece.Position(new Integer(0), new Integer(6)), b1);
        rhs_25.put(new Piece.Position(new Integer(3), new Integer(9)), b2);
        rhs_25.put(new Piece.Position(new Integer(6), new Integer(9)), b3);
        rhs_25.put(new Piece.Position(new Integer(9), new Integer(6)), b4);
        positions = (Map)UTIL.clone(rhs_25);
      }
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=getPositions KEEP=NO
  public Map getPositions () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getPositions);
    try {
      return positions;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getPositions);
    }
  }
// ***** VDMTOOLS END Name=getPositions


// ***** VDMTOOLS START Name=setPositions#1|Map KEEP=NO
  public void setPositions (final Map new_positions) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).setPositions);
    try {
      positions = (Map)UTIL.clone(new_positions);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).setPositions);
    }
  }
// ***** VDMTOOLS END Name=setPositions#1|Map


// ***** VDMTOOLS START Name=switchTurn#1|Object KEEP=NO
  public Object switchTurn (final Object player) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).switchTurn);
    try {
      if (UTIL.equals(player, new quotes.White())) 
        turn = new quotes.Black();
      else 
        turn = new quotes.White();
      return turn;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).switchTurn);
    }
  }
// ***** VDMTOOLS END Name=switchTurn#1|Object


// ***** VDMTOOLS START Name=gameOver KEEP=NO
  public Boolean gameOver () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).gameOver);
    try {
      Set amazons = new HashSet();
      Set white_amazons = new HashSet();
      Set black_amazons = new HashSet();
      Set res_s_2 = new HashSet();
      {
        Set e1_set_6 = new HashSet(positions.values());
        Piece a = null;
        Set tmpSet_12 = new HashSet(e1_set_6);
        for (Iterator enm_11 = tmpSet_12.iterator(); enm_11.hasNext(); ) {
          Piece elem_10 = (Piece)enm_11.next();
          /* a */
          a = elem_10;
          if (a instanceof Amazon) {
            res_s_2.add(a);
          }
        }
      }
      Set rhs_13 = res_s_2;
      if (!(((Object)rhs_13) instanceof Set)) 
        UTIL.RunTime("Incompatible type");
      amazons = (Set)UTIL.clone(rhs_13);
      {
        Set tmpSet_24 = new HashSet(amazons);
        for (Iterator enm_23 = tmpSet_24.iterator(); enm_23.hasNext(); ) {
          Amazon elem_14 = (Amazon)enm_23.next();
          Amazon a = null;
          /* a */
          a = elem_14;
          if (UTIL.equals(a.GetColor(), new quotes.White())) 
            white_amazons.add(a);
          else 
            black_amazons.add(a);
        }
      }
      Boolean cond_25 = null;
      if (!(cond_25 = Boolean.valueOf(UTIL.equals(canMove(white_amazons), Boolean.FALSE))).booleanValue()) 
        cond_25 = Boolean.valueOf(UTIL.equals(canMove(black_amazons), Boolean.FALSE));
      if (cond_25.booleanValue()) 
        return Boolean.TRUE;
      else 
        return Boolean.FALSE;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).gameOver);
    }
  }
// ***** VDMTOOLS END Name=gameOver


// ***** VDMTOOLS START Name=canMove#1|Set KEEP=NO
  public Boolean canMove (final Set amazons) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).canMove);
    try {
      {
        Set tmpSet_159 = new HashSet(amazons);
        for (Iterator enm_158 = tmpSet_159.iterator(); enm_158.hasNext(); ) {
          Amazon elem_2 = (Amazon)enm_158.next();
          Amazon a = null;
          /* a */
          a = elem_2;
          Boolean cond_6 = null;
          if ((cond_6 = Boolean.valueOf((a.GetX().intValue() + 1) < 10)).booleanValue()) 
            cond_6 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() + 1), a.GetY())));
          if (cond_6.booleanValue()) 
            return Boolean.TRUE;
          else {
            Boolean cond_20 = null;
            if ((cond_20 = Boolean.valueOf((a.GetY().intValue() + 1) < 10)).booleanValue()) 
              cond_20 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(a.GetX(), new Integer(a.GetY().intValue() + 1))));
            if (cond_20.booleanValue()) 
              return Boolean.TRUE;
            else {
              Boolean cond_34 = null;
              Boolean var1_35 = null;
              if ((var1_35 = Boolean.valueOf((a.GetX().intValue() + 1) < 10)).booleanValue()) 
                var1_35 = Boolean.valueOf((a.GetY().intValue() + 1) < 10);
              if ((cond_34 = var1_35).booleanValue()) 
                cond_34 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() + 1), new Integer(a.GetY().intValue() + 1))));
              if (cond_34.booleanValue()) 
                return Boolean.TRUE;
              else {
                Boolean cond_56 = null;
                if ((cond_56 = Boolean.valueOf((a.GetX().intValue() - 1) > 0)).booleanValue()) 
                  cond_56 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() - 1), a.GetY())));
                if (cond_56.booleanValue()) 
                  return Boolean.TRUE;
                else {
                  Boolean cond_70 = null;
                  if ((cond_70 = Boolean.valueOf((a.GetY().intValue() - 1) > 0)).booleanValue()) 
                    cond_70 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(a.GetX(), new Integer(a.GetY().intValue() - 1))));
                  if (cond_70.booleanValue()) 
                    return Boolean.TRUE;
                  else {
                    Boolean cond_84 = null;
                    Boolean var1_85 = null;
                    if ((var1_85 = Boolean.valueOf((a.GetX().intValue() - 1) > 0)).booleanValue()) 
                      var1_85 = Boolean.valueOf((a.GetY().intValue() - 1) > 0);
                    if ((cond_84 = var1_85).booleanValue()) 
                      cond_84 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() - 1), new Integer(a.GetY().intValue() - 1))));
                    if (cond_84.booleanValue()) 
                      return Boolean.TRUE;
                    else {
                      Boolean cond_106 = null;
                      Boolean var1_107 = null;
                      if ((var1_107 = Boolean.valueOf((a.GetX().intValue() - 1) > 0)).booleanValue()) 
                        var1_107 = Boolean.valueOf((a.GetY().intValue() + 1) < 10);
                      if ((cond_106 = var1_107).booleanValue()) 
                        cond_106 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() - 1), new Integer(a.GetY().intValue() + 1))));
                      if (cond_106.booleanValue()) 
                        return Boolean.TRUE;
                      else {
                        Boolean cond_128 = null;
                        Boolean var1_129 = null;
                        if ((var1_129 = Boolean.valueOf((a.GetX().intValue() + 1) < 10)).booleanValue()) 
                          var1_129 = Boolean.valueOf((a.GetY().intValue() - 1) > 0);
                        if ((cond_128 = var1_129).booleanValue()) 
                          cond_128 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() + 1), new Integer(a.GetY().intValue() - 1))));
                        if (cond_128.booleanValue()) 
                          return Boolean.TRUE;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return Boolean.FALSE;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).canMove);
    }
  }
// ***** VDMTOOLS END Name=canMove#1|Set


// ***** VDMTOOLS START Name=setArrow#4|Number|Number|Number|Number KEEP=NO
  public Boolean setArrow (final Number amazon_x, final Number amazon_y, final Number x, final Number y) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).setArrow);
    try {
      if (!this.pre_setArrow(amazon_x, amazon_y, x, y).booleanValue()) 
        UTIL.RunTime("Precondition failure in setArrow");
      {
        Arrow arrow = new Arrow(x, y);
        positions.put(new Piece.Position(x, y), arrow);
        return Boolean.TRUE;
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).setArrow);
    }
  }
// ***** VDMTOOLS END Name=setArrow#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=pre_setArrow#4|Number|Number|Number|Number KEEP=NO
  public Boolean pre_setArrow (final Number amazon_x, final Number amazon_y, final Number x, final Number y) throws CGException {
    Boolean varRes_5 = null;
    Boolean var1_6 = null;
    Boolean var1_7 = null;
    if ((var1_7 = Boolean.valueOf(positions.containsKey(new Piece.Position(amazon_x, amazon_y)))).booleanValue()) 
      var1_7 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(x, y)));
    if ((var1_6 = var1_7).booleanValue()) 
      var1_6 = moveIsValid(new Integer(Math.abs((amazon_x.intValue() - x.intValue()))), new Integer(Math.abs((amazon_y.intValue() - y.intValue()))));
    if ((varRes_5 = var1_6).booleanValue()) 
      varRes_5 = pathIsFree(amazon_x, amazon_y, x, y);
    return varRes_5;
  }
// ***** VDMTOOLS END Name=pre_setArrow#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=move#4|Number|Number|Number|Number KEEP=NO
  public Boolean move (final Number x, final Number y, final Number new_x, final Number new_y) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).move);
    try {
      if (!this.pre_move(x, y, new_x, new_y).booleanValue()) 
        UTIL.RunTime("Precondition failure in move");
      {
        Amazon amazon = (Amazon)(Object)positions.get(new Piece.Position(x, y));
        amazon.SetX(new_x);
        amazon.SetY(new_y);
        Map rhs_13 = new HashMap();
        Set var1_14 = new HashSet();
        var1_14.add(new Piece.Position(x, y));
        {
          Map tmpMap_19 = new HashMap();
          Set domM_20 = new HashSet(positions.keySet());
          Set tmpSet_23 = new HashSet(domM_20);
          for (Iterator enm_22 = tmpSet_23.iterator(); enm_22.hasNext(); ) {
            Object elm_21 = (Object)enm_22.next();
            if (!UTIL.Contains(var1_14, elm_21)) 
              tmpMap_19.put(elm_21, positions.get(elm_21));
          }
          rhs_13 = tmpMap_19;
        }
        positions = (Map)UTIL.clone(rhs_13);
        positions.put(new Piece.Position(new_x, new_y), amazon);
        return Boolean.TRUE;
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).move);
    }
  }
// ***** VDMTOOLS END Name=move#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=pre_move#4|Number|Number|Number|Number KEEP=NO
  public Boolean pre_move (final Number x, final Number y, final Number new_x, final Number new_y) throws CGException {
    Boolean varRes_5 = null;
    Boolean var1_6 = null;
    Boolean var1_7 = null;
    Boolean var1_8 = null;
    if ((var1_8 = Boolean.valueOf(positions.containsKey(new Piece.Position(x, y)))).booleanValue()) 
      var1_8 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new_x, new_y)));
    if ((var1_7 = var1_8).booleanValue()) 
      var1_7 = Boolean.valueOf((Piece)positions.get(new Piece.Position(x, y)) instanceof Amazon);
    if ((var1_6 = var1_7).booleanValue()) 
      var1_6 = moveIsValid(new Integer(Math.abs((x.intValue() - new_x.intValue()))), new Integer(Math.abs((y.intValue() - new_y.intValue()))));
    if ((varRes_5 = var1_6).booleanValue()) 
      varRes_5 = pathIsFree(x, y, new_x, new_y);
    return varRes_5;
  }
// ***** VDMTOOLS END Name=pre_move#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=pathIsFree#4|Number|Number|Number|Number KEEP=NO
  public Boolean pathIsFree (final Number x, final Number y, final Number new_x, final Number new_y) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).pathIsFree);
    try {
      Number deltaX = UTIL.NumberToInt(new Integer(new_x.intValue() - x.intValue()));
      Number deltaY = UTIL.NumberToInt(new Integer(new_y.intValue() - y.intValue()));
      Set pathPieces = new HashSet();
      Boolean cond_9 = null;
      if ((cond_9 = Boolean.valueOf(deltaX.intValue() == 0)).booleanValue()) 
        cond_9 = Boolean.valueOf(deltaY.intValue() > 0);
      if (cond_9.booleanValue()) {
        Set res_s_104 = new HashSet();
        {
          Set e1_set_108 = new HashSet(positions.keySet());
          Piece.Position a = null;
          Set tmpSet_125 = new HashSet(e1_set_108);
          for (Iterator enm_124 = tmpSet_125.iterator(); enm_124.hasNext(); ) {
            Piece.Position elem_123 = (Piece.Position)enm_124.next();
            /* a */
            a = elem_123;
            Set var2_112 = new HashSet();
            Set var1_113 = new HashSet();
            var1_113 = new HashSet();
            int lbi_117 = y.intValue();
            int ubi_118 = new_y.intValue();
            for (int count_116 = lbi_117; count_116 <= ubi_118; count_116++) 
              var1_113.add(new Integer(count_116));
            Set var2_119 = new HashSet();
            var2_119.add(y);
            var2_119.add(new_y);
            var2_112 = new HashSet(var1_113);
            var2_112.removeAll(var2_119);
            if (UTIL.Contains(var2_112, (a.y))) {
              res_s_104.add(a);
            }
          }
        }
        pathPieces = (Set)UTIL.clone(res_s_104);
      }
      else {
        Boolean cond_16 = null;
        if ((cond_16 = Boolean.valueOf(deltaY.intValue() == 0)).booleanValue()) 
          cond_16 = Boolean.valueOf(deltaX.intValue() > 0);
        if (cond_16.booleanValue()) {
          Set res_s_81 = new HashSet();
          {
            Set e1_set_85 = new HashSet(positions.keySet());
            Piece.Position a = null;
            Set tmpSet_102 = new HashSet(e1_set_85);
            for (Iterator enm_101 = tmpSet_102.iterator(); enm_101.hasNext(); ) {
              Piece.Position elem_100 = (Piece.Position)enm_101.next();
              /* a */
              a = elem_100;
              Set var2_89 = new HashSet();
              Set var1_90 = new HashSet();
              var1_90 = new HashSet();
              int lbi_94 = x.intValue();
              int ubi_95 = new_x.intValue();
              for (int count_93 = lbi_94; count_93 <= ubi_95; count_93++) 
                var1_90.add(new Integer(count_93));
              Set var2_96 = new HashSet();
              var2_96.add(x);
              var2_96.add(new_x);
              var2_89 = new HashSet(var1_90);
              var2_89.removeAll(var2_96);
              if (UTIL.Contains(var2_89, (a.x))) {
                res_s_81.add(a);
              }
            }
          }
          pathPieces = (Set)UTIL.clone(res_s_81);
        }
        else {
          Boolean cond_23 = null;
          if ((cond_23 = Boolean.valueOf(deltaX.intValue() == deltaY.intValue())).booleanValue()) 
            cond_23 = Boolean.valueOf(deltaX.intValue() > 0);
          if (cond_23.booleanValue()) {
            Set res_s_32 = new HashSet();
            {
              Set e1_set_36 = new HashSet(positions.keySet());
              Piece.Position a = null;
              Set tmpSet_79 = new HashSet(e1_set_36);
              for (Iterator enm_78 = tmpSet_79.iterator(); enm_78.hasNext(); ) {
                Piece.Position elem_77 = (Piece.Position)enm_78.next();
                /* a */
                a = elem_77;
                Boolean pred_37 = null;
                Boolean var1_38 = null;
                Set var2_42 = new HashSet();
                Set var1_43 = new HashSet();
                var1_43 = new HashSet();
                int lbi_47 = x.intValue();
                int ubi_48 = new_x.intValue();
                for (int count_46 = lbi_47; count_46 <= ubi_48; count_46++) 
                  var1_43.add(new Integer(count_46));
                Set var2_49 = new HashSet();
                var2_49.add(x);
                var2_49.add(new_x);
                var2_42 = new HashSet(var1_43);
                var2_42.removeAll(var2_49);
                if ((var1_38 = Boolean.valueOf(UTIL.Contains(var2_42, (a.x)))).booleanValue()) {
                  Set var2_55 = new HashSet();
                  Set var1_56 = new HashSet();
                  var1_56 = new HashSet();
                  int lbi_60 = y.intValue();
                  int ubi_61 = new_y.intValue();
                  for (int count_59 = lbi_60; count_59 <= ubi_61; count_59++) 
                    var1_56.add(new Integer(count_59));
                  Set var2_62 = new HashSet();
                  var2_62.add(y);
                  var2_62.add(new_y);
                  var2_55 = new HashSet(var1_56);
                  var2_55.removeAll(var2_62);
                  var1_38 = Boolean.valueOf(UTIL.Contains(var2_55, (a.y)));
                }
                if ((pred_37 = var1_38).booleanValue()) 
                  pred_37 = Boolean.valueOf(Math.abs(((a.x).intValue() - x.intValue())) == Math.abs(((a.y).intValue() - y.intValue())));
                if (pred_37.booleanValue()) {
                  res_s_32.add(a);
                }
              }
            }
            pathPieces = (Set)UTIL.clone(res_s_32);
          }
          else 
            return Boolean.FALSE;
        }
      }
      return Boolean.valueOf(pathPieces.size() == 0);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).pathIsFree);
    }
  }
// ***** VDMTOOLS END Name=pathIsFree#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=moveIsValid#2|Number|Number KEEP=NO
  public Boolean moveIsValid (final Number deltaX, final Number deltaY) throws CGException {
    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    if ((var1_5 = Boolean.valueOf(deltaX.intValue() == 0)).booleanValue()) 
      var1_5 = Boolean.valueOf(deltaY.intValue() > 0);
    if (!(var1_4 = var1_5).booleanValue()) {
      Boolean var2_12 = null;
      if ((var2_12 = Boolean.valueOf(deltaX.intValue() > 0)).booleanValue()) 
        var2_12 = Boolean.valueOf(deltaY.intValue() == 0);
      var1_4 = var2_12;
    }
    if (!(varRes_3 = var1_4).booleanValue()) {
      Boolean var2_19 = null;
      if ((var2_19 = Boolean.valueOf(deltaX.intValue() == deltaY.intValue())).booleanValue()) 
        var2_19 = Boolean.valueOf(deltaX.intValue() > 0);
      varRes_3 = var2_19;
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=moveIsValid#2|Number|Number

}
;
