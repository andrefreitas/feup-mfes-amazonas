//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-03 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "C:\\Users\\Ana Gomes\\Documents\\git\\mfes-amazonas\\ficheiros em rtf\\TestBoard.rtf".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.HashMap;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class TestBoard implements EvaluatePP {

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=TestBoardSentinel KEEP=NO
  class TestBoardSentinel extends Sentinel {

    public final int AssertTrue = 0;

    public final int AssertFalse = 1;

    public final int TestBoardMove = 2;

    public final int TestBoardGameOver = 3;

    public final int TestBoardPathFree = 4;

    public final int TestBoardSetArrow = 5;

    public final int TestBoardMoveValid = 6;

    public final int TestBoardSwitchTurn = 7;

    public final int nr_functions = 8;


    public TestBoardSentinel () throws CGException {}


    public TestBoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=TestBoardSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new TestBoardSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_TestBoard KEEP=NO
  private void vdm_init_TestBoard () {
    try {
      setSentinel();
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_TestBoard


// ***** VDMTOOLS START Name=TestBoard KEEP=NO
  public TestBoard () throws CGException {
    vdm_init_TestBoard();
  }
// ***** VDMTOOLS END Name=TestBoard


// ***** VDMTOOLS START Name=AssertTrue#1|Boolean KEEP=NO
  public void AssertTrue (final Boolean a) throws CGException {
    sentinel.entering(((TestBoardSentinel)sentinel).AssertTrue);
    try {
      if (!this.pre_AssertTrue(a).booleanValue()) 
        UTIL.RunTime("Precondition failure in AssertTrue");
      return;
    }
    finally {
      sentinel.leaving(((TestBoardSentinel)sentinel).AssertTrue);
    }
  }
// ***** VDMTOOLS END Name=AssertTrue#1|Boolean


// ***** VDMTOOLS START Name=pre_AssertTrue#1|Boolean KEEP=NO
  public Boolean pre_AssertTrue (final Boolean a) throws CGException {
    return a;
  }
// ***** VDMTOOLS END Name=pre_AssertTrue#1|Boolean


// ***** VDMTOOLS START Name=AssertFalse#1|Boolean KEEP=NO
  public void AssertFalse (final Boolean a) throws CGException {
    sentinel.entering(((TestBoardSentinel)sentinel).AssertFalse);
    try {
      if (!this.pre_AssertFalse(a).booleanValue()) 
        UTIL.RunTime("Precondition failure in AssertFalse");
      return;
    }
    finally {
      sentinel.leaving(((TestBoardSentinel)sentinel).AssertFalse);
    }
  }
// ***** VDMTOOLS END Name=AssertFalse#1|Boolean


// ***** VDMTOOLS START Name=pre_AssertFalse#1|Boolean KEEP=NO
  public Boolean pre_AssertFalse (final Boolean a) throws CGException {
    return Boolean.valueOf(UTIL.equals(a, Boolean.FALSE));
  }
// ***** VDMTOOLS END Name=pre_AssertFalse#1|Boolean


// ***** VDMTOOLS START Name=TestBoardMoveValid KEEP=NO
  public void TestBoardMoveValid () throws CGException {
    sentinel.entering(((TestBoardSentinel)sentinel).TestBoardMoveValid);
    try {
      Board b = new Board();
      AssertTrue(b.moveIsValid(new Integer(0), new Integer(7)));
      AssertTrue(b.moveIsValid(new Integer(2), new Integer(0)));
      AssertTrue(b.moveIsValid(new Integer(2), new Integer(2)));
      AssertFalse(b.moveIsValid(new Integer(0), new Integer(0)));
      AssertFalse(b.moveIsValid(new Integer(2), new Integer(3)));
    }
    finally {
      sentinel.leaving(((TestBoardSentinel)sentinel).TestBoardMoveValid);
    }
  }
// ***** VDMTOOLS END Name=TestBoardMoveValid


// ***** VDMTOOLS START Name=TestBoardPathFree KEEP=NO
  public void TestBoardPathFree () throws CGException {
    sentinel.entering(((TestBoardSentinel)sentinel).TestBoardPathFree);
    try {
      Board b = new Board();
      Map positions = new HashMap();
      AssertTrue(b.pathIsFree(new Integer(0), new Integer(3), new Integer(0), new Integer(5)));
      AssertTrue(b.pathIsFree(new Integer(0), new Integer(3), new Integer(3), new Integer(3)));
      AssertTrue(b.pathIsFree(new Integer(0), new Integer(3), new Integer(1), new Integer(4)));
      AssertFalse(b.pathIsFree(new Integer(0), new Integer(3), new Integer(0), new Integer(7)));
      AssertTrue(b.pathIsFree(new Integer(2), new Integer(3), new Integer(3), new Integer(4)));
      AssertFalse(b.pathIsFree(new Integer(0), new Integer(3), new Integer(5), new Integer(9)));
      Map rhs_37 = new HashMap();
      rhs_37.put(new Piece.Position(new Integer(0), new Integer(4)), new Arrow(new Integer(0), new Integer(4)));
      rhs_37.put(new Piece.Position(new Integer(1), new Integer(4)), new Arrow(new Integer(1), new Integer(4)));
      rhs_37.put(new Piece.Position(new Integer(0), new Integer(3)), new Amazon(new Integer(0), new Integer(3), new quotes.White()));
      rhs_37.put(new Piece.Position(new Integer(0), new Integer(7)), new Amazon(new Integer(0), new Integer(7), new quotes.Black()));
      positions = (Map)UTIL.clone(rhs_37);
      b.setPositions(positions);
      AssertFalse(b.pathIsFree(new Integer(0), new Integer(3), new Integer(2), new Integer(5)));
      Map rhs_72 = new HashMap();
      rhs_72.put(new Piece.Position(new Integer(1), new Integer(3)), new Arrow(new Integer(1), new Integer(3)));
      rhs_72.put(new Piece.Position(new Integer(0), new Integer(3)), new Amazon(new Integer(0), new Integer(3), new quotes.White()));
      rhs_72.put(new Piece.Position(new Integer(0), new Integer(7)), new Amazon(new Integer(0), new Integer(7), new quotes.Black()));
      positions = (Map)UTIL.clone(rhs_72);
      b.setPositions(positions);
      AssertFalse(b.pathIsFree(new Integer(0), new Integer(3), new Integer(2), new Integer(3)));
    }
    finally {
      sentinel.leaving(((TestBoardSentinel)sentinel).TestBoardPathFree);
    }
  }
// ***** VDMTOOLS END Name=TestBoardPathFree


// ***** VDMTOOLS START Name=TestBoardMove KEEP=NO
  public void TestBoardMove () throws CGException {
    sentinel.entering(((TestBoardSentinel)sentinel).TestBoardMove);
    try {
      Board b = new Board();
      AssertTrue(b.move(new Integer(0), new Integer(3), new Integer(5), new Integer(8)));
      AssertFalse(b.move(new Integer(0), new Integer(6), new Integer(0), new Integer(7)));
      AssertTrue(b.move(new Integer(3), new Integer(0), new Integer(2), new Integer(0)));
    }
    finally {
      sentinel.leaving(((TestBoardSentinel)sentinel).TestBoardMove);
    }
  }
// ***** VDMTOOLS END Name=TestBoardMove


// ***** VDMTOOLS START Name=TestBoardSetArrow KEEP=NO
  public void TestBoardSetArrow () throws CGException {
    sentinel.entering(((TestBoardSentinel)sentinel).TestBoardSetArrow);
    try {
      Board b = new Board();
      AssertTrue(b.setArrow(new Integer(0), new Integer(3), new Integer(2), new Integer(3)));
    }
    finally {
      sentinel.leaving(((TestBoardSentinel)sentinel).TestBoardSetArrow);
    }
  }
// ***** VDMTOOLS END Name=TestBoardSetArrow


// ***** VDMTOOLS START Name=TestBoardGameOver KEEP=NO
  public void TestBoardGameOver () throws CGException {
    sentinel.entering(((TestBoardSentinel)sentinel).TestBoardGameOver);
    try {
      Board b = new Board();
      Map positions = new HashMap();
      Map pos_aux = new HashMap();
      AssertFalse(b.gameOver());
      Map rhs_3 = new HashMap();
      rhs_3.put(new Piece.Position(new Integer(0), new Integer(4)), new Arrow(new Integer(0), new Integer(4)));
      rhs_3.put(new Piece.Position(new Integer(1), new Integer(4)), new Arrow(new Integer(1), new Integer(4)));
      rhs_3.put(new Piece.Position(new Integer(1), new Integer(3)), new Arrow(new Integer(1), new Integer(3)));
      rhs_3.put(new Piece.Position(new Integer(0), new Integer(2)), new Arrow(new Integer(0), new Integer(2)));
      rhs_3.put(new Piece.Position(new Integer(1), new Integer(2)), new Arrow(new Integer(1), new Integer(2)));
      rhs_3.put(new Piece.Position(new Integer(0), new Integer(3)), new Amazon(new Integer(0), new Integer(3), new quotes.Black()));
      rhs_3.put(new Piece.Position(new Integer(0), new Integer(7)), new Amazon(new Integer(0), new Integer(7), new quotes.White()));
      positions = (Map)UTIL.clone(rhs_3);
      b.setPositions(positions);
      pos_aux = (Map)UTIL.clone(b.getPositions());
      AssertTrue(Boolean.valueOf(UTIL.equals(pos_aux, positions)));
      AssertTrue(b.gameOver());
      Map rhs_57 = new HashMap();
      rhs_57.put(new Piece.Position(new Integer(1), new Integer(0)), new Arrow(new Integer(1), new Integer(0)));
      rhs_57.put(new Piece.Position(new Integer(1), new Integer(1)), new Arrow(new Integer(1), new Integer(1)));
      rhs_57.put(new Piece.Position(new Integer(0), new Integer(1)), new Arrow(new Integer(0), new Integer(1)));
      rhs_57.put(new Piece.Position(new Integer(0), new Integer(0)), new Amazon(new Integer(0), new Integer(0), new quotes.Black()));
      rhs_57.put(new Piece.Position(new Integer(0), new Integer(7)), new Amazon(new Integer(0), new Integer(7), new quotes.White()));
      positions = (Map)UTIL.clone(rhs_57);
      b.setPositions(positions);
      AssertTrue(Boolean.valueOf(UTIL.equals(b.getPositions(), positions)));
      AssertTrue(b.gameOver());
      Map rhs_98 = new HashMap();
      rhs_98.put(new Piece.Position(new Integer(8), new Integer(8)), new Arrow(new Integer(8), new Integer(8)));
      rhs_98.put(new Piece.Position(new Integer(8), new Integer(9)), new Arrow(new Integer(8), new Integer(9)));
      rhs_98.put(new Piece.Position(new Integer(9), new Integer(8)), new Arrow(new Integer(9), new Integer(8)));
      rhs_98.put(new Piece.Position(new Integer(9), new Integer(9)), new Amazon(new Integer(9), new Integer(9), new quotes.Black()));
      rhs_98.put(new Piece.Position(new Integer(3), new Integer(7)), new Amazon(new Integer(3), new Integer(7), new quotes.White()));
      positions = (Map)UTIL.clone(rhs_98);
      b.setPositions(positions);
      AssertTrue(Boolean.valueOf(UTIL.equals(b.getPositions(), positions)));
      AssertTrue(b.gameOver());
      Map rhs_139 = new HashMap();
      rhs_139.put(new Piece.Position(new Integer(1), new Integer(9)), new Arrow(new Integer(1), new Integer(9)));
      rhs_139.put(new Piece.Position(new Integer(0), new Integer(8)), new Arrow(new Integer(0), new Integer(8)));
      rhs_139.put(new Piece.Position(new Integer(0), new Integer(9)), new Amazon(new Integer(0), new Integer(9), new quotes.Black()));
      rhs_139.put(new Piece.Position(new Integer(3), new Integer(7)), new Amazon(new Integer(3), new Integer(7), new quotes.White()));
      positions = (Map)UTIL.clone(rhs_139);
      b.setPositions(positions);
      AssertTrue(Boolean.valueOf(UTIL.equals(b.getPositions(), positions)));
      AssertFalse(b.gameOver());
      Map rhs_174 = new HashMap();
      rhs_174.put(new Piece.Position(new Integer(1), new Integer(9)), new Arrow(new Integer(1), new Integer(9)));
      rhs_174.put(new Piece.Position(new Integer(0), new Integer(8)), new Arrow(new Integer(0), new Integer(8)));
      rhs_174.put(new Piece.Position(new Integer(1), new Integer(8)), new Arrow(new Integer(1), new Integer(8)));
      rhs_174.put(new Piece.Position(new Integer(0), new Integer(9)), new Amazon(new Integer(0), new Integer(9), new quotes.Black()));
      rhs_174.put(new Piece.Position(new Integer(3), new Integer(7)), new Amazon(new Integer(3), new Integer(7), new quotes.White()));
      positions = (Map)UTIL.clone(rhs_174);
      b.setPositions(positions);
      AssertTrue(Boolean.valueOf(UTIL.equals(b.getPositions(), positions)));
      AssertTrue(b.gameOver());
      Map rhs_215 = new HashMap();
      rhs_215.put(new Piece.Position(new Integer(9), new Integer(1)), new Arrow(new Integer(9), new Integer(1)));
      rhs_215.put(new Piece.Position(new Integer(8), new Integer(1)), new Arrow(new Integer(8), new Integer(1)));
      rhs_215.put(new Piece.Position(new Integer(8), new Integer(0)), new Arrow(new Integer(8), new Integer(0)));
      rhs_215.put(new Piece.Position(new Integer(9), new Integer(0)), new Amazon(new Integer(9), new Integer(0), new quotes.Black()));
      rhs_215.put(new Piece.Position(new Integer(4), new Integer(7)), new Amazon(new Integer(4), new Integer(7), new quotes.White()));
      positions = (Map)UTIL.clone(rhs_215);
      b.setPositions(positions);
      AssertTrue(Boolean.valueOf(UTIL.equals(b.getPositions(), positions)));
      AssertTrue(b.gameOver());
      Map rhs_256 = new HashMap();
      rhs_256.put(new Piece.Position(new Integer(1), new Integer(2)), new Amazon(new Integer(1), new Integer(2), new quotes.White()));
      positions = (Map)UTIL.clone(rhs_256);
      b.setPositions(positions);
      AssertTrue(Boolean.valueOf(UTIL.equals(b.getPositions(), positions)));
      AssertFalse(b.gameOver());
    }
    finally {
      sentinel.leaving(((TestBoardSentinel)sentinel).TestBoardGameOver);
    }
  }
// ***** VDMTOOLS END Name=TestBoardGameOver


// ***** VDMTOOLS START Name=TestBoardSwitchTurn KEEP=NO
  public void TestBoardSwitchTurn () throws CGException {
    sentinel.entering(((TestBoardSentinel)sentinel).TestBoardSwitchTurn);
    try {
      Board b = new Board();
      AssertTrue(Boolean.valueOf(UTIL.equals(b.switchTurn(), new quotes.Black())));
      AssertTrue(Boolean.valueOf(UTIL.equals(b.switchTurn(), new quotes.White())));
    }
    finally {
      sentinel.leaving(((TestBoardSentinel)sentinel).TestBoardSwitchTurn);
    }
  }
// ***** VDMTOOLS END Name=TestBoardSwitchTurn

}
;
