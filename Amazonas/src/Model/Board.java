package model;

//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2013-12-04 by the VDM++ to JAVA Code Generator
// (v9.0.2 - Thu 14-Mar-2013 12:36:47 +0900)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// This file was genereted from "C:\\Users\\Ana Gomes\\Documents\\git\\mfes-amazonas\\ficheiros em rtf\\Board.rtf".

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO
import java.util.Map;
import java.util.Set;
import java.util.List;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ArrayList;
import jp.vdmtools.VDM.UTIL;
import jp.vdmtools.VDM.Record;
import jp.vdmtools.VDM.Sentinel;
import jp.vdmtools.VDM.EvaluatePP;
import jp.vdmtools.VDM.CGException;
// ***** VDMTOOLS END Name=imports



public class Board implements EvaluatePP {

// ***** VDMTOOLS START Name=positions KEEP=NO
  private volatile Map positions = new HashMap();
// ***** VDMTOOLS END Name=positions

// ***** VDMTOOLS START Name=arrows KEEP=NO
  private volatile List arrows = null;
// ***** VDMTOOLS END Name=arrows

// ***** VDMTOOLS START Name=turn KEEP=NO
  private volatile Object turn = null;
// ***** VDMTOOLS END Name=turn

// ***** VDMTOOLS START Name=setarrow KEEP=NO
  private volatile Boolean setarrow = null;
// ***** VDMTOOLS END Name=setarrow

// ***** VDMTOOLS START Name=amazon_moved KEEP=NO
  private volatile Amazon amazon_moved = null;
// ***** VDMTOOLS END Name=amazon_moved

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardSentinel KEEP=NO
  class BoardSentinel extends Sentinel {

    public final int move = 0;

    public final int Board = 1;

    public final int winner = 2;

    public final int canMove = 3;

    public final int getTurn = 4;

    public final int gameOver = 5;

    public final int setArrow = 6;

    public final int pathIsFree = 7;

    public final int switchTurn = 8;

    public final int countAmazons = 9;

    public final int getPositions = 10;

    public final int setPositions = 11;

    public final int countBlackAmazons = 12;

    public final int countWhiteAmazons = 13;

    public final int nr_functions = 14;


    public BoardSentinel () throws CGException {}


    public BoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return Boolean.TRUE;
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardSentinel(this);
    }
    catch (Exception e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel


// ***** VDMTOOLS START Name=vdm_init_Board KEEP=NO
  private void vdm_init_Board () {
    try {
      setSentinel();
      arrows = new ArrayList();
      turn = new quotes.White();
      setarrow = Boolean.FALSE;
      amazon_moved = new Amazon(new Integer(0), new Integer(0), new quotes.White());
    }
    catch (Exception e) {
      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Board


// ***** VDMTOOLS START Name=inv_Board KEEP=NO
  public Boolean inv_Board () {
    Set res_s_8 = new HashSet();
    {
      Set e1_set_12 = new HashSet(positions.values());
      Piece a = null;
      Set tmpSet_18 = new HashSet(e1_set_12);
      for (Iterator enm_17 = tmpSet_18.iterator(); enm_17.hasNext(); ) {
        Piece elem_16 = (Piece)enm_17.next();
        /* a */
        a = elem_16;
        if (a instanceof Amazon) {
          res_s_8.add(a);
        }
      }
    }
    return Boolean.valueOf(res_s_8.size() <= 8);
  }
// ***** VDMTOOLS END Name=inv_Board


// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board () throws CGException {
    try {
      vdm_init_Board();
      {
        Amazon w1 = new Amazon(new Integer(0), new Integer(3), new quotes.White());
        Amazon w2 = new Amazon(new Integer(3), new Integer(0), new quotes.White());
        Amazon w3 = new Amazon(new Integer(9), new Integer(3), new quotes.White());
        Amazon w4 = new Amazon(new Integer(6), new Integer(0), new quotes.White());
        Amazon b1 = new Amazon(new Integer(0), new Integer(6), new quotes.Black());
        Amazon b2 = new Amazon(new Integer(3), new Integer(9), new quotes.Black());
        Amazon b3 = new Amazon(new Integer(6), new Integer(9), new quotes.Black());
        Amazon b4 = new Amazon(new Integer(9), new Integer(6), new quotes.Black());
        Map rhs_25 = new HashMap();
        rhs_25.put(new Piece.Position(new Integer(0), new Integer(3)), w1);
        rhs_25.put(new Piece.Position(new Integer(0), new Integer(3)), w1);
        rhs_25.put(new Piece.Position(new Integer(3), new Integer(0)), w2);
        rhs_25.put(new Piece.Position(new Integer(9), new Integer(3)), w3);
        rhs_25.put(new Piece.Position(new Integer(6), new Integer(0)), w4);
        rhs_25.put(new Piece.Position(new Integer(0), new Integer(6)), b1);
        rhs_25.put(new Piece.Position(new Integer(3), new Integer(9)), b2);
        rhs_25.put(new Piece.Position(new Integer(6), new Integer(9)), b3);
        rhs_25.put(new Piece.Position(new Integer(9), new Integer(6)), b4);
        positions = (Map)UTIL.clone(rhs_25);
      }
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=getTurn KEEP=NO
  public Object getTurn () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getTurn);
    try {
      return turn;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getTurn);
    }
  }
// ***** VDMTOOLS END Name=getTurn


// ***** VDMTOOLS START Name=getPositions KEEP=NO
  public Map getPositions () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).getPositions);
    try {
      return positions;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).getPositions);
    }
  }
// ***** VDMTOOLS END Name=getPositions


// ***** VDMTOOLS START Name=setPositions#1|Map KEEP=NO
  public void setPositions (final Map new_positions) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).setPositions);
    try {
      positions = (Map)UTIL.clone(new_positions);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).setPositions);
    }
  }
// ***** VDMTOOLS END Name=setPositions#1|Map


// ***** VDMTOOLS START Name=switchTurn KEEP=NO
  private Object switchTurn () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).switchTurn);
    try {
      if (UTIL.equals(turn, new quotes.White())) {
        turn = new quotes.Black();
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
      }
      else {
        turn = new quotes.White();
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
      }
      return turn;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).switchTurn);
    }
  }
// ***** VDMTOOLS END Name=switchTurn


// ***** VDMTOOLS START Name=winner KEEP=NO
  public Object winner () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).winner);
    try {
      Object win = null;
      Set amazons = new HashSet();
      Set white_amazons = new HashSet();
      Set black_amazons = new HashSet();
      Set res_s_2 = new HashSet();
      {
        Set e1_set_6 = new HashSet(positions.values());
        Piece a = null;
        Set tmpSet_12 = new HashSet(e1_set_6);
        for (Iterator enm_11 = tmpSet_12.iterator(); enm_11.hasNext(); ) {
          Piece elem_10 = (Piece)enm_11.next();
          /* a */
          a = elem_10;
          if (a instanceof Amazon) {
            res_s_2.add(a);
          }
        }
      }
      Set rhs_13 = res_s_2;
      if (!(((Object)rhs_13) instanceof Set)) 
        UTIL.RunTime("Incompatible type");
      amazons = (Set)UTIL.clone(rhs_13);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      Set res_s_15 = new HashSet();
      {
        Amazon a = null;
        Set tmpSet_24 = new HashSet(amazons);
        for (Iterator enm_23 = tmpSet_24.iterator(); enm_23.hasNext(); ) {
          Amazon elem_22 = (Amazon)enm_23.next();
          /* a */
          a = elem_22;
          if (UTIL.equals(a.GetColor(), new quotes.White())) {
            res_s_15.add(a);
          }
        }
      }
      white_amazons = (Set)UTIL.clone(res_s_15);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      Set res_s_26 = new HashSet();
      {
        Amazon a = null;
        Set tmpSet_35 = new HashSet(amazons);
        for (Iterator enm_34 = tmpSet_35.iterator(); enm_34.hasNext(); ) {
          Amazon elem_33 = (Amazon)enm_34.next();
          /* a */
          a = elem_33;
          if (UTIL.equals(a.GetColor(), new quotes.Black())) {
            res_s_26.add(a);
          }
        }
      }
      black_amazons = (Set)UTIL.clone(res_s_26);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      if (UTIL.equals(gameOver(), Boolean.TRUE)) {
        Boolean cond_39 = null;
        if ((cond_39 = Boolean.valueOf(UTIL.equals(canMove(white_amazons), Boolean.FALSE))).booleanValue()) 
          cond_39 = Boolean.valueOf(UTIL.equals(canMove(black_amazons), Boolean.FALSE));
        if (cond_39.booleanValue()) {
          win = new quotes.Draw();
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        else if (UTIL.equals(canMove(white_amazons), Boolean.FALSE)) {
          win = new quotes.Black();
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        else {
          win = new quotes.White();
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        return win;
      }
      win = new quotes.None();
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      return win;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).winner);
    }
  }
// ***** VDMTOOLS END Name=winner


// ***** VDMTOOLS START Name=gameOver KEEP=NO
  public Boolean gameOver () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).gameOver);
    try {
      Set amazons = new HashSet();
      Set white_amazons = new HashSet();
      Set black_amazons = new HashSet();
      Set res_s_2 = new HashSet();
      {
        Set e1_set_6 = new HashSet(positions.values());
        Piece a = null;
        Set tmpSet_12 = new HashSet(e1_set_6);
        for (Iterator enm_11 = tmpSet_12.iterator(); enm_11.hasNext(); ) {
          Piece elem_10 = (Piece)enm_11.next();
          /* a */
          a = elem_10;
          if (a instanceof Amazon) {
            res_s_2.add(a);
          }
        }
      }
      Set rhs_13 = res_s_2;
      if (!(((Object)rhs_13) instanceof Set)) 
        UTIL.RunTime("Incompatible type");
      amazons = (Set)UTIL.clone(rhs_13);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      Set res_s_15 = new HashSet();
      {
        Amazon a = null;
        Set tmpSet_24 = new HashSet(amazons);
        for (Iterator enm_23 = tmpSet_24.iterator(); enm_23.hasNext(); ) {
          Amazon elem_22 = (Amazon)enm_23.next();
          /* a */
          a = elem_22;
          if (UTIL.equals(a.GetColor(), new quotes.White())) {
            res_s_15.add(a);
          }
        }
      }
      white_amazons = (Set)UTIL.clone(res_s_15);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      Set res_s_26 = new HashSet();
      {
        Amazon a = null;
        Set tmpSet_35 = new HashSet(amazons);
        for (Iterator enm_34 = tmpSet_35.iterator(); enm_34.hasNext(); ) {
          Amazon elem_33 = (Amazon)enm_34.next();
          /* a */
          a = elem_33;
          if (UTIL.equals(a.GetColor(), new quotes.Black())) {
            res_s_26.add(a);
          }
        }
      }
      black_amazons = (Set)UTIL.clone(res_s_26);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      Boolean cond_36 = null;
      if (!(cond_36 = Boolean.valueOf(UTIL.equals(canMove(white_amazons), Boolean.FALSE))).booleanValue()) 
        cond_36 = Boolean.valueOf(UTIL.equals(canMove(black_amazons), Boolean.FALSE));
      if (cond_36.booleanValue()) 
        return Boolean.TRUE;
      else 
        return Boolean.FALSE;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).gameOver);
    }
  }
// ***** VDMTOOLS END Name=gameOver


// ***** VDMTOOLS START Name=canMove#1|Set KEEP=NO
  private Boolean canMove (final Set amazons) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).canMove);
    try {
      Set canMovePieces = new HashSet();
      Set res_s_2 = new HashSet();
      {
        Amazon a = null;
        Set tmpSet_159 = new HashSet(amazons);
        for (Iterator enm_158 = tmpSet_159.iterator(); enm_158.hasNext(); ) {
          Amazon elem_157 = (Amazon)enm_158.next();
          /* a */
          a = elem_157;
          Boolean pred_5 = null;
          Boolean var1_6 = null;
          Boolean var1_7 = null;
          Boolean var1_8 = null;
          Boolean var1_9 = null;
          Boolean var1_10 = null;
          Boolean var1_11 = null;
          Boolean var1_12 = null;
          if ((var1_12 = Boolean.valueOf((a.GetX().intValue() + 1) < 10)).booleanValue()) 
            var1_12 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() + 1), a.GetY())));
          if (!(var1_11 = var1_12).booleanValue()) {
            Boolean var2_26 = null;
            if ((var2_26 = Boolean.valueOf((a.GetY().intValue() + 1) < 10)).booleanValue()) 
              var2_26 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(a.GetX(), new Integer(a.GetY().intValue() + 1))));
            var1_11 = var2_26;
          }
          if (!(var1_10 = var1_11).booleanValue()) {
            Boolean var2_40 = null;
            Boolean var1_41 = null;
            if ((var1_41 = Boolean.valueOf((a.GetX().intValue() + 1) < 10)).booleanValue()) 
              var1_41 = Boolean.valueOf((a.GetY().intValue() + 1) < 10);
            if ((var2_40 = var1_41).booleanValue()) 
              var2_40 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() + 1), new Integer(a.GetY().intValue() + 1))));
            var1_10 = var2_40;
          }
          if (!(var1_9 = var1_10).booleanValue()) {
            Boolean var2_62 = null;
            if ((var2_62 = Boolean.valueOf((a.GetX().intValue() - 1) > 0)).booleanValue()) 
              var2_62 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() - 1), a.GetY())));
            var1_9 = var2_62;
          }
          if (!(var1_8 = var1_9).booleanValue()) {
            Boolean var2_76 = null;
            if ((var2_76 = Boolean.valueOf((a.GetY().intValue() - 1) > 0)).booleanValue()) 
              var2_76 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(a.GetX(), new Integer(a.GetY().intValue() - 1))));
            var1_8 = var2_76;
          }
          if (!(var1_7 = var1_8).booleanValue()) {
            Boolean var2_90 = null;
            Boolean var1_91 = null;
            if ((var1_91 = Boolean.valueOf((a.GetX().intValue() - 1) > 0)).booleanValue()) 
              var1_91 = Boolean.valueOf((a.GetY().intValue() - 1) > 0);
            if ((var2_90 = var1_91).booleanValue()) 
              var2_90 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() - 1), new Integer(a.GetY().intValue() - 1))));
            var1_7 = var2_90;
          }
          if (!(var1_6 = var1_7).booleanValue()) {
            Boolean var2_112 = null;
            Boolean var1_113 = null;
            if ((var1_113 = Boolean.valueOf((a.GetX().intValue() - 1) > 0)).booleanValue()) 
              var1_113 = Boolean.valueOf((a.GetY().intValue() + 1) < 10);
            if ((var2_112 = var1_113).booleanValue()) 
              var2_112 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() - 1), new Integer(a.GetY().intValue() + 1))));
            var1_6 = var2_112;
          }
          if (!(pred_5 = var1_6).booleanValue()) {
            Boolean var2_134 = null;
            Boolean var1_135 = null;
            if ((var1_135 = Boolean.valueOf((a.GetX().intValue() + 1) < 10)).booleanValue()) 
              var1_135 = Boolean.valueOf((a.GetY().intValue() - 1) > 0);
            if ((var2_134 = var1_135).booleanValue()) 
              var2_134 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new Integer(a.GetX().intValue() + 1), new Integer(a.GetY().intValue() - 1))));
            pred_5 = var2_134;
          }
          if (pred_5.booleanValue()) {
            res_s_2.add(a);
          }
        }
      }
      canMovePieces = res_s_2;
      if (canMovePieces.size() > 0) 
        return Boolean.TRUE;
      else 
        return Boolean.FALSE;
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).canMove);
    }
  }
// ***** VDMTOOLS END Name=canMove#1|Set


// ***** VDMTOOLS START Name=setArrow#4|Number|Number|Number|Number KEEP=NO
  public Boolean setArrow (final Number amazon_x, final Number amazon_y, final Number x, final Number y) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).setArrow);
    try {
      if (!this.pre_setArrow(amazon_x, amazon_y, x, y).booleanValue()) 
        UTIL.RunTime("Precondition failure in setArrow");
      {
        Amazon amazon = (Amazon)(Object)positions.get(new Piece.Position(amazon_x, amazon_y));
        Arrow arrow = new Arrow(x, y);
        Boolean cond_11 = null;
        Boolean var1_12 = null;
        Boolean var1_13 = null;
        if (!(var1_13 = Boolean.valueOf(!UTIL.equals(amazon.GetColor(), turn))).booleanValue()) 
          var1_13 = Boolean.valueOf(UTIL.equals(setarrow, Boolean.FALSE));
        if (!(var1_12 = var1_13).booleanValue()) 
          var1_12 = Boolean.valueOf(!(amazon_moved.GetX().intValue() == amazon_x.intValue()));
        if (!(cond_11 = var1_12).booleanValue()) 
          cond_11 = Boolean.valueOf(!(amazon_moved.GetY().intValue() == amazon_y.intValue()));
        if (cond_11.booleanValue()) 
          return Boolean.FALSE;
        positions.put(new Piece.Position(x, y), arrow);
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        setarrow = Boolean.FALSE;
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        turn = UTIL.clone(switchTurn());
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        return Boolean.TRUE;
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).setArrow);
    }
  }
// ***** VDMTOOLS END Name=setArrow#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=pre_setArrow#4|Number|Number|Number|Number KEEP=NO
  public Boolean pre_setArrow (final Number amazon_x, final Number amazon_y, final Number x, final Number y) throws CGException {
    Boolean varRes_5 = null;
    Boolean var1_6 = null;
    Boolean var1_7 = null;
    Boolean var1_8 = null;
    Boolean var1_9 = null;
    Boolean var1_10 = null;
    Boolean var1_11 = null;
    if ((var1_11 = Boolean.valueOf(positions.containsKey(new Piece.Position(amazon_x, amazon_y)))).booleanValue()) 
      var1_11 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(x, y)));
    if ((var1_10 = var1_11).booleanValue()) 
      var1_10 = moveIsValid(new Integer(Math.abs((amazon_x.intValue() - x.intValue()))), new Integer(Math.abs((amazon_y.intValue() - y.intValue()))));
    if ((var1_9 = var1_10).booleanValue()) 
      var1_9 = pathIsFree(amazon_x, amazon_y, x, y);
    if ((var1_8 = var1_9).booleanValue()) 
      var1_8 = Boolean.valueOf(x.intValue() >= 0);
    if ((var1_7 = var1_8).booleanValue()) 
      var1_7 = Boolean.valueOf(x.intValue() < 10);
    if ((var1_6 = var1_7).booleanValue()) 
      var1_6 = Boolean.valueOf(y.intValue() >= 0);
    if ((varRes_5 = var1_6).booleanValue()) 
      varRes_5 = Boolean.valueOf(y.intValue() < 10);
    return varRes_5;
  }
// ***** VDMTOOLS END Name=pre_setArrow#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=move#4|Number|Number|Number|Number KEEP=NO
  public Boolean move (final Number x, final Number y, final Number new_x, final Number new_y) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).move);
    try {
      if (!this.pre_move(x, y, new_x, new_y).booleanValue()) 
        UTIL.RunTime("Precondition failure in move");
      {
        Amazon amazon = (Amazon)(Object)positions.get(new Piece.Position(x, y));
        Boolean cond_9 = null;
        if (!(cond_9 = Boolean.valueOf(!UTIL.equals(amazon.GetColor(), turn))).booleanValue()) 
          cond_9 = Boolean.valueOf(UTIL.equals(setarrow, Boolean.TRUE));
        if (cond_9.booleanValue()) 
          return Boolean.FALSE;
        amazon.SetX(new_x);
        amazon.SetY(new_y);
        Map rhs_21 = new HashMap();
        Set var1_22 = new HashSet();
        var1_22.add(new Piece.Position(x, y));
        {
          Map tmpMap_27 = new HashMap();
          Set domM_28 = new HashSet(positions.keySet());
          Set tmpSet_31 = new HashSet(domM_28);
          for (Iterator enm_30 = tmpSet_31.iterator(); enm_30.hasNext(); ) {
            Object elm_29 = (Object)enm_30.next();
            if (!UTIL.Contains(var1_22, elm_29)) 
              tmpMap_27.put(elm_29, positions.get(elm_29));
          }
          rhs_21 = tmpMap_27;
        }
        positions = (Map)UTIL.clone(rhs_21);
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        positions.put(new Piece.Position(new_x, new_y), amazon);
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        setarrow = Boolean.TRUE;
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        amazon_moved = (Amazon)UTIL.clone(amazon);
        if (!this.inv_Board().booleanValue()) 
          UTIL.RunTime("Instance invariant failure in Board");
        return Boolean.TRUE;
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).move);
    }
  }
// ***** VDMTOOLS END Name=move#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=pre_move#4|Number|Number|Number|Number KEEP=NO
  public Boolean pre_move (final Number x, final Number y, final Number new_x, final Number new_y) throws CGException {
    Boolean varRes_5 = null;
    Boolean var1_6 = null;
    Boolean var1_7 = null;
    Boolean var1_8 = null;
    Boolean var1_9 = null;
    Boolean var1_10 = null;
    Boolean var1_11 = null;
    Boolean var1_12 = null;
    Boolean var1_13 = null;
    Boolean var1_14 = null;
    Boolean var1_15 = null;
    if ((var1_15 = Boolean.valueOf(positions.containsKey(new Piece.Position(x, y)))).booleanValue()) 
      var1_15 = Boolean.valueOf(!UTIL.Contains(new HashSet(positions.keySet()), new Piece.Position(new_x, new_y)));
    if ((var1_14 = var1_15).booleanValue()) 
      var1_14 = Boolean.valueOf((Piece)positions.get(new Piece.Position(x, y)) instanceof Amazon);
    if ((var1_13 = var1_14).booleanValue()) 
      var1_13 = moveIsValid(new Integer(Math.abs((x.intValue() - new_x.intValue()))), new Integer(Math.abs((y.intValue() - new_y.intValue()))));
    if ((var1_12 = var1_13).booleanValue()) 
      var1_12 = pathIsFree(x, y, new_x, new_y);
    if ((var1_11 = var1_12).booleanValue()) 
      var1_11 = Boolean.valueOf(countBlackAmazons().intValue() == 4);
    if ((var1_10 = var1_11).booleanValue()) 
      var1_10 = Boolean.valueOf(countWhiteAmazons().intValue() == 4);
    if ((var1_9 = var1_10).booleanValue()) 
      var1_9 = Boolean.valueOf(countAmazons().intValue() == 8);
    if ((var1_8 = var1_9).booleanValue()) 
      var1_8 = Boolean.valueOf(new_x.intValue() >= 0);
    if ((var1_7 = var1_8).booleanValue()) 
      var1_7 = Boolean.valueOf(new_x.intValue() < 10);
    if ((var1_6 = var1_7).booleanValue()) 
      var1_6 = Boolean.valueOf(new_y.intValue() >= 0);
    if ((varRes_5 = var1_6).booleanValue()) 
      varRes_5 = Boolean.valueOf(new_y.intValue() < 10);
    return varRes_5;
  }
// ***** VDMTOOLS END Name=pre_move#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=countAmazons KEEP=NO
  public Number countAmazons () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).countAmazons);
    try {
      Set amazons = new HashSet();
      Set res_s_2 = new HashSet();
      {
        Set e1_set_6 = new HashSet(positions.values());
        Piece a = null;
        Set tmpSet_12 = new HashSet(e1_set_6);
        for (Iterator enm_11 = tmpSet_12.iterator(); enm_11.hasNext(); ) {
          Piece elem_10 = (Piece)enm_11.next();
          /* a */
          a = elem_10;
          if (a instanceof Amazon) {
            res_s_2.add(a);
          }
        }
      }
      Set rhs_13 = res_s_2;
      if (!(((Object)rhs_13) instanceof Set)) 
        UTIL.RunTime("Incompatible type");
      amazons = (Set)UTIL.clone(rhs_13);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      return new Integer(amazons.size());
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).countAmazons);
    }
  }
// ***** VDMTOOLS END Name=countAmazons


// ***** VDMTOOLS START Name=countBlackAmazons KEEP=NO
  public Number countBlackAmazons () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).countBlackAmazons);
    try {
      Set amazons = new HashSet();
      Set black_amazons = new HashSet();
      Set res_s_2 = new HashSet();
      {
        Set e1_set_6 = new HashSet(positions.values());
        Piece a = null;
        Set tmpSet_12 = new HashSet(e1_set_6);
        for (Iterator enm_11 = tmpSet_12.iterator(); enm_11.hasNext(); ) {
          Piece elem_10 = (Piece)enm_11.next();
          /* a */
          a = elem_10;
          if (a instanceof Amazon) {
            res_s_2.add(a);
          }
        }
      }
      Set rhs_13 = res_s_2;
      if (!(((Object)rhs_13) instanceof Set)) 
        UTIL.RunTime("Incompatible type");
      amazons = (Set)UTIL.clone(rhs_13);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      Set res_s_15 = new HashSet();
      {
        Amazon a = null;
        Set tmpSet_24 = new HashSet(amazons);
        for (Iterator enm_23 = tmpSet_24.iterator(); enm_23.hasNext(); ) {
          Amazon elem_22 = (Amazon)enm_23.next();
          /* a */
          a = elem_22;
          if (UTIL.equals(a.GetColor(), new quotes.Black())) {
            res_s_15.add(a);
          }
        }
      }
      black_amazons = (Set)UTIL.clone(res_s_15);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      return new Integer(black_amazons.size());
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).countBlackAmazons);
    }
  }
// ***** VDMTOOLS END Name=countBlackAmazons


// ***** VDMTOOLS START Name=countWhiteAmazons KEEP=NO
  public Number countWhiteAmazons () throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).countWhiteAmazons);
    try {
      Set amazons = new HashSet();
      Set white_amazons = new HashSet();
      Set res_s_2 = new HashSet();
      {
        Set e1_set_6 = new HashSet(positions.values());
        Piece a = null;
        Set tmpSet_12 = new HashSet(e1_set_6);
        for (Iterator enm_11 = tmpSet_12.iterator(); enm_11.hasNext(); ) {
          Piece elem_10 = (Piece)enm_11.next();
          /* a */
          a = elem_10;
          if (a instanceof Amazon) {
            res_s_2.add(a);
          }
        }
      }
      Set rhs_13 = res_s_2;
      if (!(((Object)rhs_13) instanceof Set)) 
        UTIL.RunTime("Incompatible type");
      amazons = (Set)UTIL.clone(rhs_13);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      Set res_s_15 = new HashSet();
      {
        Amazon a = null;
        Set tmpSet_24 = new HashSet(amazons);
        for (Iterator enm_23 = tmpSet_24.iterator(); enm_23.hasNext(); ) {
          Amazon elem_22 = (Amazon)enm_23.next();
          /* a */
          a = elem_22;
          if (UTIL.equals(a.GetColor(), new quotes.White())) {
            res_s_15.add(a);
          }
        }
      }
      white_amazons = (Set)UTIL.clone(res_s_15);
      if (!this.inv_Board().booleanValue()) 
        UTIL.RunTime("Instance invariant failure in Board");
      return new Integer(white_amazons.size());
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).countWhiteAmazons);
    }
  }
// ***** VDMTOOLS END Name=countWhiteAmazons


// ***** VDMTOOLS START Name=pathIsFree#4|Number|Number|Number|Number KEEP=NO
  public Boolean pathIsFree (final Number x, final Number y, final Number new_x, final Number new_y) throws CGException {
    sentinel.entering(((BoardSentinel)sentinel).pathIsFree);
    try {
      Number deltaX = new Integer(Math.abs((new_x.intValue() - x.intValue())));
      Number deltaY = new Integer(Math.abs((new_y.intValue() - y.intValue())));
      Set pathPieces = new HashSet();
      Boolean cond_11 = null;
      if ((cond_11 = Boolean.valueOf(deltaX.intValue() == 0)).booleanValue()) 
        cond_11 = Boolean.valueOf(deltaY.intValue() > 0);
      if (cond_11.booleanValue()) {
        if (new_y.intValue() > y.intValue()) {
          Set res_s_333 = new HashSet();
          {
            Set e1_set_337 = new HashSet(positions.keySet());
            Piece.Position a = null;
            Set tmpSet_359 = new HashSet(e1_set_337);
            for (Iterator enm_358 = tmpSet_359.iterator(); enm_358.hasNext(); ) {
              Piece.Position elem_357 = (Piece.Position)enm_358.next();
              /* a */
              a = elem_357;
              Boolean pred_338 = null;
              Set var2_342 = new HashSet();
              Set var1_343 = new HashSet();
              var1_343 = new HashSet();
              int lbi_347 = y.intValue();
              int ubi_348 = new_y.intValue();
              for (int count_346 = lbi_347; count_346 <= ubi_348; count_346++) 
                var1_343.add(new Integer(count_346));
              Set var2_349 = new HashSet();
              var2_349.add(y);
              var2_349.add(new_y);
              var2_342 = new HashSet(var1_343);
              var2_342.removeAll(var2_349);
              if ((pred_338 = Boolean.valueOf(UTIL.Contains(var2_342, (a.y)))).booleanValue()) 
                pred_338 = Boolean.valueOf((a.x).intValue() == x.intValue());
              if (pred_338.booleanValue()) {
                res_s_333.add(a);
              }
            }
          }
          pathPieces = (Set)UTIL.clone(res_s_333);
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
        else {
          Set res_s_305 = new HashSet();
          {
            Set e1_set_309 = new HashSet(positions.keySet());
            Piece.Position a = null;
            Set tmpSet_331 = new HashSet(e1_set_309);
            for (Iterator enm_330 = tmpSet_331.iterator(); enm_330.hasNext(); ) {
              Piece.Position elem_329 = (Piece.Position)enm_330.next();
              /* a */
              a = elem_329;
              Boolean pred_310 = null;
              Set var2_314 = new HashSet();
              Set var1_315 = new HashSet();
              var1_315 = new HashSet();
              int lbi_319 = new_y.intValue();
              int ubi_320 = y.intValue();
              for (int count_318 = lbi_319; count_318 <= ubi_320; count_318++) 
                var1_315.add(new Integer(count_318));
              Set var2_321 = new HashSet();
              var2_321.add(y);
              var2_321.add(new_y);
              var2_314 = new HashSet(var1_315);
              var2_314.removeAll(var2_321);
              if ((pred_310 = Boolean.valueOf(UTIL.Contains(var2_314, (a.y)))).booleanValue()) 
                pred_310 = Boolean.valueOf((a.x).intValue() == x.intValue());
              if (pred_310.booleanValue()) {
                res_s_305.add(a);
              }
            }
          }
          pathPieces = (Set)UTIL.clone(res_s_305);
          if (!this.inv_Board().booleanValue()) 
            UTIL.RunTime("Instance invariant failure in Board");
        }
      }
      else {
        Boolean cond_18 = null;
        if ((cond_18 = Boolean.valueOf(deltaY.intValue() == 0)).booleanValue()) 
          cond_18 = Boolean.valueOf(deltaX.intValue() > 0);
        if (cond_18.booleanValue()) {
          if (new_x.intValue() > x.intValue()) {
            Set res_s_274 = new HashSet();
            {
              Set e1_set_278 = new HashSet(positions.keySet());
              Piece.Position a = null;
              Set tmpSet_300 = new HashSet(e1_set_278);
              for (Iterator enm_299 = tmpSet_300.iterator(); enm_299.hasNext(); ) {
                Piece.Position elem_298 = (Piece.Position)enm_299.next();
                /* a */
                a = elem_298;
                Boolean pred_279 = null;
                Set var2_283 = new HashSet();
                Set var1_284 = new HashSet();
                var1_284 = new HashSet();
                int lbi_288 = x.intValue();
                int ubi_289 = new_x.intValue();
                for (int count_287 = lbi_288; count_287 <= ubi_289; count_287++) 
                  var1_284.add(new Integer(count_287));
                Set var2_290 = new HashSet();
                var2_290.add(x);
                var2_290.add(new_x);
                var2_283 = new HashSet(var1_284);
                var2_283.removeAll(var2_290);
                if ((pred_279 = Boolean.valueOf(UTIL.Contains(var2_283, (a.x)))).booleanValue()) 
                  pred_279 = Boolean.valueOf((a.y).intValue() == y.intValue());
                if (pred_279.booleanValue()) {
                  res_s_274.add(a);
                }
              }
            }
            pathPieces = (Set)UTIL.clone(res_s_274);
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
          else {
            Set res_s_246 = new HashSet();
            {
              Set e1_set_250 = new HashSet(positions.keySet());
              Piece.Position a = null;
              Set tmpSet_272 = new HashSet(e1_set_250);
              for (Iterator enm_271 = tmpSet_272.iterator(); enm_271.hasNext(); ) {
                Piece.Position elem_270 = (Piece.Position)enm_271.next();
                /* a */
                a = elem_270;
                Boolean pred_251 = null;
                Set var2_255 = new HashSet();
                Set var1_256 = new HashSet();
                var1_256 = new HashSet();
                int lbi_260 = new_x.intValue();
                int ubi_261 = x.intValue();
                for (int count_259 = lbi_260; count_259 <= ubi_261; count_259++) 
                  var1_256.add(new Integer(count_259));
                Set var2_262 = new HashSet();
                var2_262.add(x);
                var2_262.add(new_x);
                var2_255 = new HashSet(var1_256);
                var2_255.removeAll(var2_262);
                if ((pred_251 = Boolean.valueOf(UTIL.Contains(var2_255, (a.x)))).booleanValue()) 
                  pred_251 = Boolean.valueOf((a.y).intValue() == y.intValue());
                if (pred_251.booleanValue()) {
                  res_s_246.add(a);
                }
              }
            }
            pathPieces = (Set)UTIL.clone(res_s_246);
            if (!this.inv_Board().booleanValue()) 
              UTIL.RunTime("Instance invariant failure in Board");
          }
        }
        else {
          Boolean cond_25 = null;
          if ((cond_25 = Boolean.valueOf(deltaX.intValue() == deltaY.intValue())).booleanValue()) 
            cond_25 = Boolean.valueOf(deltaX.intValue() > 0);
          if (cond_25.booleanValue()) {
            Boolean cond_33 = null;
            if ((cond_33 = Boolean.valueOf(new_x.intValue() > x.intValue())).booleanValue()) 
              cond_33 = Boolean.valueOf(new_y.intValue() > y.intValue());
            if (cond_33.booleanValue()) {
              Set res_s_194 = new HashSet();
              {
                Set e1_set_198 = new HashSet(positions.keySet());
                Piece.Position a = null;
                Set tmpSet_241 = new HashSet(e1_set_198);
                for (Iterator enm_240 = tmpSet_241.iterator(); enm_240.hasNext(); ) {
                  Piece.Position elem_239 = (Piece.Position)enm_240.next();
                  /* a */
                  a = elem_239;
                  Boolean pred_199 = null;
                  Boolean var1_200 = null;
                  Set var2_204 = new HashSet();
                  Set var1_205 = new HashSet();
                  var1_205 = new HashSet();
                  int lbi_209 = x.intValue();
                  int ubi_210 = new_x.intValue();
                  for (int count_208 = lbi_209; count_208 <= ubi_210; count_208++) 
                    var1_205.add(new Integer(count_208));
                  Set var2_211 = new HashSet();
                  var2_211.add(x);
                  var2_211.add(new_x);
                  var2_204 = new HashSet(var1_205);
                  var2_204.removeAll(var2_211);
                  if ((var1_200 = Boolean.valueOf(UTIL.Contains(var2_204, (a.x)))).booleanValue()) {
                    Set var2_217 = new HashSet();
                    Set var1_218 = new HashSet();
                    var1_218 = new HashSet();
                    int lbi_222 = y.intValue();
                    int ubi_223 = new_y.intValue();
                    for (int count_221 = lbi_222; count_221 <= ubi_223; count_221++) 
                      var1_218.add(new Integer(count_221));
                    Set var2_224 = new HashSet();
                    var2_224.add(y);
                    var2_224.add(new_y);
                    var2_217 = new HashSet(var1_218);
                    var2_217.removeAll(var2_224);
                    var1_200 = Boolean.valueOf(UTIL.Contains(var2_217, (a.y)));
                  }
                  if ((pred_199 = var1_200).booleanValue()) 
                    pred_199 = Boolean.valueOf(Math.abs(((a.x).intValue() - x.intValue())) == Math.abs(((a.y).intValue() - y.intValue())));
                  if (pred_199.booleanValue()) {
                    res_s_194.add(a);
                  }
                }
              }
              pathPieces = (Set)UTIL.clone(res_s_194);
              if (!this.inv_Board().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Board");
            }
            else if (new_x.intValue() > x.intValue()) {
              Set res_s_145 = new HashSet();
              {
                Set e1_set_149 = new HashSet(positions.keySet());
                Piece.Position a = null;
                Set tmpSet_192 = new HashSet(e1_set_149);
                for (Iterator enm_191 = tmpSet_192.iterator(); enm_191.hasNext(); ) {
                  Piece.Position elem_190 = (Piece.Position)enm_191.next();
                  /* a */
                  a = elem_190;
                  Boolean pred_150 = null;
                  Boolean var1_151 = null;
                  Set var2_155 = new HashSet();
                  Set var1_156 = new HashSet();
                  var1_156 = new HashSet();
                  int lbi_160 = x.intValue();
                  int ubi_161 = new_x.intValue();
                  for (int count_159 = lbi_160; count_159 <= ubi_161; count_159++) 
                    var1_156.add(new Integer(count_159));
                  Set var2_162 = new HashSet();
                  var2_162.add(x);
                  var2_162.add(new_x);
                  var2_155 = new HashSet(var1_156);
                  var2_155.removeAll(var2_162);
                  if ((var1_151 = Boolean.valueOf(UTIL.Contains(var2_155, (a.x)))).booleanValue()) {
                    Set var2_168 = new HashSet();
                    Set var1_169 = new HashSet();
                    var1_169 = new HashSet();
                    int lbi_173 = new_y.intValue();
                    int ubi_174 = y.intValue();
                    for (int count_172 = lbi_173; count_172 <= ubi_174; count_172++) 
                      var1_169.add(new Integer(count_172));
                    Set var2_175 = new HashSet();
                    var2_175.add(y);
                    var2_175.add(new_y);
                    var2_168 = new HashSet(var1_169);
                    var2_168.removeAll(var2_175);
                    var1_151 = Boolean.valueOf(UTIL.Contains(var2_168, (a.y)));
                  }
                  if ((pred_150 = var1_151).booleanValue()) 
                    pred_150 = Boolean.valueOf(Math.abs(((a.x).intValue() - x.intValue())) == Math.abs(((a.y).intValue() - y.intValue())));
                  if (pred_150.booleanValue()) {
                    res_s_145.add(a);
                  }
                }
              }
              pathPieces = (Set)UTIL.clone(res_s_145);
              if (!this.inv_Board().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Board");
            }
            else if (new_y.intValue() > y.intValue()) {
              Set res_s_96 = new HashSet();
              {
                Set e1_set_100 = new HashSet(positions.keySet());
                Piece.Position a = null;
                Set tmpSet_143 = new HashSet(e1_set_100);
                for (Iterator enm_142 = tmpSet_143.iterator(); enm_142.hasNext(); ) {
                  Piece.Position elem_141 = (Piece.Position)enm_142.next();
                  /* a */
                  a = elem_141;
                  Boolean pred_101 = null;
                  Boolean var1_102 = null;
                  Set var2_106 = new HashSet();
                  Set var1_107 = new HashSet();
                  var1_107 = new HashSet();
                  int lbi_111 = new_x.intValue();
                  int ubi_112 = x.intValue();
                  for (int count_110 = lbi_111; count_110 <= ubi_112; count_110++) 
                    var1_107.add(new Integer(count_110));
                  Set var2_113 = new HashSet();
                  var2_113.add(x);
                  var2_113.add(new_x);
                  var2_106 = new HashSet(var1_107);
                  var2_106.removeAll(var2_113);
                  if ((var1_102 = Boolean.valueOf(UTIL.Contains(var2_106, (a.x)))).booleanValue()) {
                    Set var2_119 = new HashSet();
                    Set var1_120 = new HashSet();
                    var1_120 = new HashSet();
                    int lbi_124 = y.intValue();
                    int ubi_125 = new_y.intValue();
                    for (int count_123 = lbi_124; count_123 <= ubi_125; count_123++) 
                      var1_120.add(new Integer(count_123));
                    Set var2_126 = new HashSet();
                    var2_126.add(y);
                    var2_126.add(new_y);
                    var2_119 = new HashSet(var1_120);
                    var2_119.removeAll(var2_126);
                    var1_102 = Boolean.valueOf(UTIL.Contains(var2_119, (a.y)));
                  }
                  if ((pred_101 = var1_102).booleanValue()) 
                    pred_101 = Boolean.valueOf(Math.abs(((a.x).intValue() - x.intValue())) == Math.abs(((a.y).intValue() - y.intValue())));
                  if (pred_101.booleanValue()) {
                    res_s_96.add(a);
                  }
                }
              }
              pathPieces = (Set)UTIL.clone(res_s_96);
              if (!this.inv_Board().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Board");
            }
            else {
              Set res_s_47 = new HashSet();
              {
                Set e1_set_51 = new HashSet(positions.keySet());
                Piece.Position a = null;
                Set tmpSet_94 = new HashSet(e1_set_51);
                for (Iterator enm_93 = tmpSet_94.iterator(); enm_93.hasNext(); ) {
                  Piece.Position elem_92 = (Piece.Position)enm_93.next();
                  /* a */
                  a = elem_92;
                  Boolean pred_52 = null;
                  Boolean var1_53 = null;
                  Set var2_57 = new HashSet();
                  Set var1_58 = new HashSet();
                  var1_58 = new HashSet();
                  int lbi_62 = new_x.intValue();
                  int ubi_63 = x.intValue();
                  for (int count_61 = lbi_62; count_61 <= ubi_63; count_61++) 
                    var1_58.add(new Integer(count_61));
                  Set var2_64 = new HashSet();
                  var2_64.add(x);
                  var2_64.add(new_x);
                  var2_57 = new HashSet(var1_58);
                  var2_57.removeAll(var2_64);
                  if ((var1_53 = Boolean.valueOf(UTIL.Contains(var2_57, (a.x)))).booleanValue()) {
                    Set var2_70 = new HashSet();
                    Set var1_71 = new HashSet();
                    var1_71 = new HashSet();
                    int lbi_75 = new_y.intValue();
                    int ubi_76 = y.intValue();
                    for (int count_74 = lbi_75; count_74 <= ubi_76; count_74++) 
                      var1_71.add(new Integer(count_74));
                    Set var2_77 = new HashSet();
                    var2_77.add(y);
                    var2_77.add(new_y);
                    var2_70 = new HashSet(var1_71);
                    var2_70.removeAll(var2_77);
                    var1_53 = Boolean.valueOf(UTIL.Contains(var2_70, (a.y)));
                  }
                  if ((pred_52 = var1_53).booleanValue()) 
                    pred_52 = Boolean.valueOf(Math.abs(((a.x).intValue() - x.intValue())) == Math.abs(((a.y).intValue() - y.intValue())));
                  if (pred_52.booleanValue()) {
                    res_s_47.add(a);
                  }
                }
              }
              pathPieces = (Set)UTIL.clone(res_s_47);
              if (!this.inv_Board().booleanValue()) 
                UTIL.RunTime("Instance invariant failure in Board");
            }
          }
          else 
            return Boolean.FALSE;
        }
      }
      return Boolean.valueOf(pathPieces.size() == 0);
    }
    finally {
      sentinel.leaving(((BoardSentinel)sentinel).pathIsFree);
    }
  }
// ***** VDMTOOLS END Name=pathIsFree#4|Number|Number|Number|Number


// ***** VDMTOOLS START Name=moveIsValid#2|Number|Number KEEP=NO
  public Boolean moveIsValid (final Number deltaX, final Number deltaY) throws CGException {
    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    if ((var1_5 = Boolean.valueOf(deltaX.intValue() == 0)).booleanValue()) 
      var1_5 = Boolean.valueOf(deltaY.intValue() > 0);
    if (!(var1_4 = var1_5).booleanValue()) {
      Boolean var2_12 = null;
      if ((var2_12 = Boolean.valueOf(deltaX.intValue() > 0)).booleanValue()) 
        var2_12 = Boolean.valueOf(deltaY.intValue() == 0);
      var1_4 = var2_12;
    }
    if (!(varRes_3 = var1_4).booleanValue()) {
      Boolean var2_19 = null;
      if ((var2_19 = Boolean.valueOf(deltaX.intValue() == deltaY.intValue())).booleanValue()) 
        var2_19 = Boolean.valueOf(deltaX.intValue() > 0);
      varRes_3 = var2_19;
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=moveIsValid#2|Number|Number

}
;
