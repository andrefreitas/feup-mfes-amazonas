/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;


import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author Ana Gomes
 */
public class BoardPanel extends javax.swing.JPanel implements MouseListener{
    
    private static BufferedImage boardImage = null;
    public static BufferedImage whitePiece = null;
    public static BufferedImage blackPiece = null;
    public static BufferedImage arrowPiece = null;
    public static BufferedImage aura = null;
    
    
    
    /**
     * Creates new form BoardPanel
     * 
     */
    public BoardPanel() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void initComponents() {
        try {
            boardImage = ImageIO.read(getClass().getResource("/images/boardBG.png"));
            whitePiece = ImageIO.read(getClass().getResource("/images/piece_white.png"));
            blackPiece = ImageIO.read(getClass().getResource("/images/piece_black.png"));
            arrowPiece = ImageIO.read(getClass().getResource("/images/arrow.png"));
            aura = ImageIO.read(getClass().getResource("/images/aura.png"));   
        } catch (IOException ex) {
            Logger.getLogger(BoardPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        addMouseListener(this);        
    }
    
    @Override
    public void paintComponent (Graphics g) {
        drawBoard(g);
        
    }
    
    private void drawBoard(Graphics g){
        g.drawImage(boardImage,0,0,null);
        Game.drawPieces(g);
    }
    
    public static void drawBlackPiece(Graphics g, int panel_x, int panel_y){
        g.drawImage(blackPiece, panel_x, panel_y, null);
    }
    
    public static void drawWhitePiece(Graphics g, int panel_x, int panel_y){
        g.drawImage(whitePiece, panel_x, panel_y, null);
    }
    
    public static void drawArrowPiece(Graphics g, int panel_x, int panel_y){
        g.drawImage(arrowPiece, panel_x, panel_y, null);
    }
    
    public static void drawAura(Graphics g, int panel_x, int panel_y){
        g.drawImage(aura, panel_x, panel_y, null);
    }
    
    public static int[] getPositionAtMouse(int x,int y){
        int boardX = (x-20)/40;
        int boardY = 9 -(y/40);
        int[] pos;
        pos = new int[2];
        pos[0] = boardX;
        pos[1] = boardY;
        return pos;
    }
    
      @Override
    public void mouseClicked(MouseEvent e) {
        System.out.println("mouse Clicked! on pannel position: ("+e.getX()+", "+e.getY()+")");
        int[] pos = getPositionAtMouse(e.getX(), e.getY());
        System.out.println("Board Pos: ("+pos[0]+", "+pos[1]+")");
    }

    @Override
    public void mousePressed(MouseEvent e) {}

    @Override
    public void mouseReleased(MouseEvent e) {}

    @Override
    public void mouseEntered(MouseEvent e) {}

    @Override
    public void mouseExited(MouseEvent e) {}
    
    /*@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(400, 400));
        setMinimumSize(new java.awt.Dimension(400, 400));
        setPreferredSize(new java.awt.Dimension(400, 400));
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents
*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

  
}
