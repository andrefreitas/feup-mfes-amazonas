class Board
	types
	values
	-- TODO Define values here
	instance variables
		private positions : map Piece`Position to Piece;
		private arrows : seq of Arrow := [];
		inv len {a | a in set (rng positions) & sameclass(a, Amazon)} = 8;
	operations
		public Board: () ==> Board
			Board() == (
				dcl w1: Amazon := new Amazon(0, 3, <White>);
				dcl w2: Amazon := new Amazon(3, 0, <White>);
				dcl w3: Amazon := new Amazon(9, 3, <White>);
				dcl w4: Amazon := new Amazon(6, 0, <White>);
				dcl b1: Amazon := new Amazon(0, 6, <Black>);
				dcl b2: Amazon := new Amazon(3, 9, <Black>);
				dcl b3: Amazon := new Amazon(6, 9, <Black>);
				dcl b4: Amazon := new Amazon(9, 6, <Black>);
				positions := {mk_Piece`Position(0,3) :-> w1,
											mk_Piece`Position(3,0) :-> w2,
											mk_Piece`Position(9,3) :-> w3,
											mk_Piece`Position(6,0) :-> w4,
											mk_Piece`Position(0,6) :-> b1,
											mk_Piece`Position(3,9) :-> b2,
											mk_Piece`Position(6,9) :-> b3,
											mk_Piece`Position(9,6) :-> b4
											};
			);
			
		public getAmazons: () ==> seq of Amazon
			getAmazons() == ( return amazons );
			
		public getAmazonIndexAt : nat * nat ==> nat
			getAmazonIndexAt(x, y) == (
				for i = 0 to len amazons by 1 do (
					if amazons(i).getX() = x and amazons(i).getY() = y
					then return i;
				);
				return -1;
			);
			
		-- move : moves a amazon on the board
		public move : nat * nat * nat * nat ==> ()
			move(x, y, new_x, new_y) == (
				
			);
			

	functions
	traces
end Board